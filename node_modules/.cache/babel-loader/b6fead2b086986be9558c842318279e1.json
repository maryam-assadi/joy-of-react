{"ast":null,"code":"/**\n * Thanks to Github user dylano for supplying a more-accurate\n * solving algorithm!\n */\nexport function checkGuess(guess, answer) {\n  // This constant is a placeholder that indicates we've successfully\n  // dealt with this character (it's correct, or misplaced).\n  const SOLVED_CHAR = '✓';\n\n  if (!guess) {\n    return null;\n  }\n\n  const guessChars = guess.toUpperCase().split('');\n  const answerChars = answer.split('');\n  const result = []; // Step 1: Look for correct letters.\n\n  for (let i = 0; i < guessChars.length; i++) {\n    if (guessChars[i] === answerChars[i]) {\n      result[i] = {\n        letter: guessChars[i],\n        status: 'correct'\n      };\n      answerChars[i] = SOLVED_CHAR;\n      guessChars[i] = SOLVED_CHAR;\n    }\n  } // Step 2: look for misplaced letters. If it's not misplaced,\n  // it must be incorrect.\n\n\n  for (let i = 0; i < guessChars.length; i++) {\n    if (guessChars[i] === SOLVED_CHAR) {\n      continue;\n    }\n\n    let status = 'incorrect';\n    const misplacedIndex = answerChars.findIndex(char => char === guessChars[i]);\n\n    if (misplacedIndex >= 0) {\n      status = 'misplaced';\n      answerChars[misplacedIndex] = SOLVED_CHAR;\n    }\n\n    result[i] = {\n      letter: guessChars[i],\n      status\n    };\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/maryamassadi/joy-of-react/src/game-helpers.js"],"names":["checkGuess","guess","answer","SOLVED_CHAR","guessChars","toUpperCase","split","answerChars","result","i","length","letter","status","misplacedIndex","findIndex","char"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AACxC;AACA;AACA,QAAMC,WAAW,GAAG,GAApB;;AAEA,MAAI,CAACF,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,QAAMG,UAAU,GAAGH,KAAK,CAACI,WAAN,GAAoBC,KAApB,CAA0B,EAA1B,CAAnB;AACA,QAAMC,WAAW,GAAGL,MAAM,CAACI,KAAP,CAAa,EAAb,CAApB;AAEA,QAAME,MAAM,GAAG,EAAf,CAZwC,CAcxC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACM,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,QAAIL,UAAU,CAACK,CAAD,CAAV,KAAkBF,WAAW,CAACE,CAAD,CAAjC,EAAsC;AACpCD,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAY;AACVE,QAAAA,MAAM,EAAEP,UAAU,CAACK,CAAD,CADR;AAEVG,QAAAA,MAAM,EAAE;AAFE,OAAZ;AAIAL,MAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBN,WAAjB;AACAC,MAAAA,UAAU,CAACK,CAAD,CAAV,GAAgBN,WAAhB;AACD;AACF,GAxBuC,CA0BxC;AACA;;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACM,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,QAAIL,UAAU,CAACK,CAAD,CAAV,KAAkBN,WAAtB,EAAmC;AACjC;AACD;;AAED,QAAIS,MAAM,GAAG,WAAb;AACA,UAAMC,cAAc,GAAGN,WAAW,CAACO,SAAZ,CACpBC,IAAD,IAAUA,IAAI,KAAKX,UAAU,CAACK,CAAD,CADR,CAAvB;;AAGA,QAAII,cAAc,IAAI,CAAtB,EAAyB;AACvBD,MAAAA,MAAM,GAAG,WAAT;AACAL,MAAAA,WAAW,CAACM,cAAD,CAAX,GAA8BV,WAA9B;AACD;;AAEDK,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAY;AACVE,MAAAA,MAAM,EAAEP,UAAU,CAACK,CAAD,CADR;AAEVG,MAAAA;AAFU,KAAZ;AAID;;AAED,SAAOJ,MAAP;AACD","sourcesContent":["/**\n * Thanks to Github user dylano for supplying a more-accurate\n * solving algorithm!\n */\n\nexport function checkGuess(guess, answer) {\n  // This constant is a placeholder that indicates we've successfully\n  // dealt with this character (it's correct, or misplaced).\n  const SOLVED_CHAR = '✓';\n\n  if (!guess) {\n    return null;\n  }\n\n  const guessChars = guess.toUpperCase().split('');\n  const answerChars = answer.split('');\n\n  const result = [];\n\n  // Step 1: Look for correct letters.\n  for (let i = 0; i < guessChars.length; i++) {\n    if (guessChars[i] === answerChars[i]) {\n      result[i] = {\n        letter: guessChars[i],\n        status: 'correct',\n      };\n      answerChars[i] = SOLVED_CHAR;\n      guessChars[i] = SOLVED_CHAR;\n    }\n  }\n\n  // Step 2: look for misplaced letters. If it's not misplaced,\n  // it must be incorrect.\n  for (let i = 0; i < guessChars.length; i++) {\n    if (guessChars[i] === SOLVED_CHAR) {\n      continue;\n    }\n\n    let status = 'incorrect';\n    const misplacedIndex = answerChars.findIndex(\n      (char) => char === guessChars[i]\n    );\n    if (misplacedIndex >= 0) {\n      status = 'misplaced';\n      answerChars[misplacedIndex] = SOLVED_CHAR;\n    }\n\n    result[i] = {\n      letter: guessChars[i],\n      status,\n    };\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}